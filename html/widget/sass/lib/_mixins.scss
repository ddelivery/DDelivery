// responsive example, needs to be edited
$break-small: 767px;
$break-large: 768px;
$break-large-right: 1024px;
@mixin respond-to($media) {
	@if $media == mobile {
		@media only screen and (max-width: $break-small) {
			@content;
		}
	} @else if $media == tablet {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right) {
			@content;
		}
	} @else if $media == tablet-portrait {
		@media only screen and (min-width: $break-large) and (max-width: $break-large-right) and (orientation: portrait) {
			@content;
		}
	} @else if $media == desc {
		@media only screen and (max-width: 1365px) {
			@content;
		}
	}
}

// retina bg
@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
		@content;
	}
}

// BACKGROUND SIZE
@mixin background-size($width: 100%, $height: 100%) {
	-moz-background-size: $width $height;
	-webkit-background-size: $width $height;
	background-size: $width $height;
}

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
	-moz-transform: rotate($deg + deg);
	-o-transform: rotate($deg + deg);
	-webkit-transform: rotate($deg + deg);
	-ms-transform: rotate($deg + deg);
	transform: rotate($deg + deg);
	filter: progid:DXImageTransform.Microsoft.Matrix(
					M11=$m11, M12=$m12, M21=$m21, M22=$m22, sizingMethod='auto expand');
	zoom: 1;
}

// TRANSITION
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
	-moz-transition: $what $length $easing;
	-o-transition: $what $length $easing;
	-webkit-transition: $what $length $easing;
	-ms-transition: $what $length $easing;
	transition: $what $length $easing;
}

// image replacement extend
%hide-text {
	font: 0/0 a;
	text-shadow: none;
	color: transparent;
}

// %clr{
//   &:after{
//     content: ".";
//     display: block;
//     height: 0;
//     clear: both;
//     visibility: hidden;
//     }
// }
%clr {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	*zoom: 1;
}

// placeholder color
@mixin placeholder-color($color) {
	&.placeholder {
		color: $color;
	}
	&:-moz-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

%gray {
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 10+ */
	filter: gray; /* IE6-9 */
	-webkit-filter: grayscale(100%); /* Chrome 19+ & Safari 6+ */
}

%gray-half {
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'saturate\' values=\'0.5\'/></filter></svg>#grayscale"); /* Firefox 10+ */
	filter: gray alpha(opacity=50); /* IE6-9 */
	-webkit-filter: grayscale(50%); /* Chrome 19+ & Safari 6+ */
}

%gray-zero {
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
	-webkit-filter: grayscale(0%);
}

@mixin unselectable() {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin prevent-text() {
	-ms-word-break: break-all;
	word-break: break-all;
	word-break: break-word;
	-webkit-hyphens: auto;
	-moz-hyphens: auto;
	hyphens: auto;
}

@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}

// sized sprites
@mixin image-size($path) {
	width: image-width($path);
	height: image-height($path);
}

@mixin sized-sprite($map, $sprite) {
	background: sprite($map, $sprite) no-repeat;
	@include image-size(sprite-file($map, $sprite));
}

@mixin sized-sprite-2x($map, $sprite) {
	background: sprite($map, $sprite) no-repeat;
	background-position: 0 round(nth(sprite-position($map, $sprite), 2) / 2);
	height: round(image-height(sprite-file($map, $sprite)) / 2);
	width: round(image-width(sprite-file($map, $sprite)) /2);
	@include background-size(ceil(image-width(sprite-path($map)) / 2), ceil(image-height(sprite-path($map)) / 2));
}

@mixin hide-text {
	display: inline-block;
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

@mixin text {
	font-family: 'RobotoRegular';
	font-size: 14px;
	line-height: 22px;
	color: #000;
	letter-spacing: 1px;
}

@mixin title {
	font-size: 24px;
	font-family: 'FuturaDemiCRegular';
	color: #000;
	text-transform: uppercase;
	line-height: 36px;
	position: relative;
}

@mixin title-line {
	&:after {
		content: "";
		display: block;
		width: 64px;
		height: 3px;
		background: #000;
		position: absolute;
		bottom: 30px;
		left: 0;
	}
}

@mixin check {
	float: left;
	padding-right: 21px;
	font-size: 160px;
	line-height: 162px;
	font-family: 'FuturaDemiCRegular';
	color: #000;
	text-transform: uppercase;
}